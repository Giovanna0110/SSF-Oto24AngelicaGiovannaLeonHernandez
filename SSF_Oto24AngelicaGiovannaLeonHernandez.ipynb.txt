{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "f2kYCRhBz9E0",
        "outputId": "2b4bfd3c-2f29-4eed-945a-9bc5c8ba902d"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "El polinomio evaluado en x=2 es: 11\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "def horner(coeffs, x):\n",
        "  n = len(coeffs)\n",
        "  result = coeffs[0]\n",
        "  for i in range (1, n):\n",
        "    result = result * x + coeffs[i]\n",
        "  return result\n",
        "\n",
        "  #Ejemplo de uso:\n",
        "  #p(x) = 1 + 2x + 3xË†2 evaluado en 2\n",
        "\n",
        "coeficientes = [1, 2, 3]\n",
        "x = 2\n",
        "\n",
        "print(f'El polinomio evaluado en x={x} es: {horner(coeficientes, x)}')"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import math\n",
        "def cos_serie(x, n_terms):\n",
        "  cosx = 0\n",
        "  sign = 1 # Alterna entre positivo y negativo\n",
        "  for n in range(n_terms):\n",
        "    term = (x ** (2 * n)) / math.factorial(2 * n)\n",
        "    cosx += sign * term\n",
        "    sign *= -1 # Cambiar el signo\n",
        "  return cosx\n",
        "\n",
        "#Ejemplo de uso:\n",
        "x = 1.0\n",
        "n_terms = 10 # Usamos 10 terminos de la serie\n",
        "cos_aprox = cos_serie(x, n_terms)\n",
        "cos_directo = math.cos(x)\n",
        "print(f'cos({x}) usando la serie de Taylor: {cos_aprox}')\n",
        "print(f'cos({x}) usando la funcion math.cos: {cos_directo}')\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "o43SY4Z03kBn",
        "outputId": "102a65cf-6f60-4c49-ea79-23005d4159fb"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "cos(1.0) usando la serie de Taylor: 0.5403023058681397\n",
            "cos(1.0) usando la funcion math.cos: 0.5403023058681398\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "def calcular_tabla_cos(x_values, n_terms):\n",
        "  data = {\"x\": [], \"cos_serie\": [], \"cos_directo\": [], \"error_relativo\": []}\n",
        "  for x in x_values:\n",
        "    cos_aprox = cos_serie(x, n_terms)\n",
        "    cos_directo = math.cos(x)\n",
        "    error_relativo = abs((cos_directo - cos_aprox) / cos_directo)\n",
        "    data[\"x\"].append(x)\n",
        "    data[\"cos_serie\"].append(cos_aprox)\n",
        "    data[\"cos_directo\"].append(cos_directo)\n",
        "    data[\"error_relativo\"].append(error_relativo)\n",
        "  return pd.DataFrame(data)\n",
        "\n",
        "#Ejemplo de uso:\n",
        "x_values = [0.1, 0.5, 1.0, 2.0,3.14]\n",
        "x_terms = 10\n",
        "tabla_cos = calcular_tabla_cos(x_values, n_terms)\n",
        "print(tabla_cos)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CP-jF0PZ-YOi",
        "outputId": "ed24870d-e30f-4b10-d7d3-1de1e5b62e9a"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "      x  cos_serie  cos_directo  error_relativo\n",
            "0  0.10   0.995004     0.995004    0.000000e+00\n",
            "1  0.50   0.877583     0.877583    0.000000e+00\n",
            "2  1.00   0.540302     0.540302    2.054818e-16\n",
            "3  2.00  -0.416147    -0.416147    1.026861e-12\n",
            "4  3.14  -0.999999    -0.999999    3.493548e-09\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "#Ejemplo de datos (debes cambiar estos valores por los datos reales de stars.dat)\n",
        "temperatura = [3000, 4500, 6000, 5500, 7000] #Temperaturas en K\n",
        "luminosidad = [1.2, 2.3, 3.0, 1.5, 2.8] #Luminosidad en unidades solares\n",
        "\n",
        "#Crear la grafica HR\n",
        "plt.scatter(temperatura, luminosidad)\n",
        "plt.xlabel('Temperatura (K)')\n",
        "plt.ylabel('Luminosidad (solar)')\n",
        "plt.title('HR Diagram')\n",
        "plt.gca().invert_yaxis() # Invertir el eje Y para que la luminosidad sea creciente\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "5gIBgfqR-bjf",
        "outputId": "d799b3a5-1825-431a-d06f-8be40ec03b65"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}